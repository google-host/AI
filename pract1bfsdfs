#include<iostream>   // for input-output operations
#include<stack>      // for DFS traversals using stack
#include<queue>      // for BFS traversal using queue
using namespace std;

// Class representing a single node in the tree
class Node {
public:
    int data;         // Value of the node
    Node *left, *right;  // Pointers to left and right children

    // Constructor initializes node with data and null children
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Class representing the Binary Search Tree
class Tree {
    // Private function to insert a node into the BST recursively
    Node* insert(Node* root, int val) {
        if (!root) return new Node(val);  // If current root is null, create new node
        if (val < root->data)             // If value is less, insert into left subtree
            root->left = insert(root->left, val);
        else if (val > root->data)        // If value is greater, insert into right subtree
            root->right = insert(root->right, val);
        return root;  // Return the root after insertion
    }

public:
    Node* root = nullptr;  // Tree starts with an empty root

    // Public method to insert a value into the BST
    void create(int val) {
        root = insert(root, val);
    }

    // Iterative DFS Preorder traversal: Root -> Left -> Right
    void dfsPreorder(Node* root) {
        if (!root) return;
        stack<Node*> s;
        s.push(root);
        while (!s.empty()) {
            Node* curr = s.top(); s.pop();
            cout << curr->data << " ";     // Print node
            if (curr->right) s.push(curr->right); // Push right child first
            if (curr->left) s.push(curr->left);   // Push left child
        }
        cout << endl;
    }

    // Iterative DFS Inorder traversal: Left -> Root -> Right
    void dfsInorder(Node* root) {
        stack<Node*> s;
        Node* curr = root;
        while (curr || !s.empty()) {
            while (curr) {       // Go to leftmost node
                s.push(curr);
                curr = curr->left;
            }
            curr = s.top(); s.pop(); // Process node
            cout << curr->data << " ";
            curr = curr->right;     // Move to right subtree
        }
        cout << endl;
    }

    // Iterative DFS Postorder traversal: Left -> Right -> Root
    void dfsPostorder(Node* root) {
        if (!root) return;
        stack<Node*> s1, s2;
        s1.push(root);
        while (!s1.empty()) {
            Node* curr = s1.top(); s1.pop();
            s2.push(curr);              // Store nodes in postorder using 2 stacks
            if (curr->left) s1.push(curr->left);
            if (curr->right) s1.push(curr->right);
        }
        while (!s2.empty()) {
            cout << s2.top()->data << " "; s2.pop();  // Print nodes from second stack
        }
        cout << endl;
    }

    // BFS traversal (Level Order Traversal)
    void bfs(Node* root) {
        if (!root) return;
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            Node* curr = q.front(); q.pop();
            cout << curr->data << " ";   // Print current node
            if (curr->left) q.push(curr->left);   // Enqueue left child
            if (curr->right) q.push(curr->right); // Enqueue right child
        }
        cout << endl;
    }
};

// Main function to drive the program
int main() {
    Tree t;
    int choice, order, val;

    // Ask user whether to perform DFS or BFS
    cout << "1. DFS\n2. BFS\nEnter choice: ";
    cin >> choice;

    // Insert 6 values to form the binary search tree
    cout << "Enter 6 values:\n";
    for (int i = 0; i < 6; ++i) {
        cin >> val;
        t.create(val);  // Insert into tree
    }

    // If DFS is selected
    if (choice == 1) {
        cout << "1. Preorder\n2. Inorder\n3. Postorder\nEnter DFS order: ";
        cin >> order;

        // Perform chosen DFS order
        if (order == 1)
            t.dfsPreorder(t.root);
        else if (order == 2)
            t.dfsInorder(t.root);
        else if (order == 3)
            t.dfsPostorder(t.root);
        else
            cout << "Invalid DFS choice.\n";
    }
    // If BFS is selected
    else if (choice == 2) {
        t.bfs(t.root);
    }
    else {
        cout << "Invalid choice.\n";
    }

    return 0;
}
