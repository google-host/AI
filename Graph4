#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;

class Graph {
    int cgraph[5][5];        // Adjacency matrix for the graph
    int v;                   // Number of vertices
    int color[5];            // Current coloring of graph
    int bestColoring[5];     // Best (minimum color) solution found
    int minColors;           // Minimum number of colors needed

public:
    // Constructor: Initializes the graph and sets default values
    Graph(int numVertices, int adjMatrix[5][5]) {
        v = numVertices;
        for (int i = 0; i < v; i++) {
            for (int j = 0; j < v; j++) {
                cgraph[i][j] = adjMatrix[i][j]; // Copy input adjacency matrix
            }
        }
        fill(color, color + v, -1);             // All nodes initially uncolored
        fill(bestColoring, bestColoring + v, -1);
        minColors = INT_MAX;                    // Start with max color (worst case)
    }

    // Check if it's safe to color node with 'col' (i.e., no adjacent has same color)
    bool isSafe(int node, int col) {
        for (int i = 0; i < v; i++) {
            if (cgraph[node][i] == 1 && color[i] == col) {
                return false;
            }
        }
        return true;
    }

    // Recursive function using branch and bound to explore colorings
    void branchAndBound(int node, int usedColors) {
        if (node == v) {
            // All nodes colored â€” check if current solution uses fewer colors
            if (usedColors < minColors) {
                minColors = usedColors;
                copy(color, color + v, bestColoring); // Save this as best solution
            }
            return;
        }

        // Try coloring current node with every possible color
        for (int col = 0; col < v; col++) {
            if (isSafe(node, col)) {
                color[node] = col; // Assign color
                int nextUsedColors = max(usedColors, col + 1); // Update colors used
                if (nextUsedColors < minColors) {
                    branchAndBound(node + 1, nextUsedColors); // Recursive call
                }
                color[node] = -1; // Backtrack
            }
        }
    }

    // Wrapper function to start the coloring and print result
    void solveGraphColoring() {
        branchAndBound(0, 0);
        if (minColors != INT_MAX) {
            cout << "Solution found with " << minColors << " colors:" << endl;
            for (int i = 0; i < v; i++) {
                cout << "Vertex " << i << " -> Color " << bestColoring[i] << endl;
            }
        } else {
            cout << "No solution exists." << endl;
        }
    }
};

int main() {
    // Example graph: adjacency matrix of 5 nodes
    int adjMatrix[5][5] = {
        {0, 1, 1, 0, 0},  // Vertex 0 connected to 1, 2
        {1, 0, 0, 1, 1},  // Vertex 1 connected to 0, 3, 4
        {1, 0, 0, 0, 1},  // Vertex 2 connected to 0, 4
        {0, 1, 0, 0, 0},  // Vertex 3 connected to 1
        {0, 1, 1, 0, 0}   // Vertex 4 connected to 1, 2
    };
    
    int numVertices = 5;

    // Create graph object and solve
    Graph g(numVertices, adjMatrix);
    g.solveGraphColoring();

    return 0;
}
